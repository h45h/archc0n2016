input { 
	stdin {
		type => "stdin-type" # probably want to disable this in prod
	}
	file {
		start_position => beginning
		path => [ "c:/users/monkey/pycharmprojects/bsideslv2016/logstash/crconvert/CrowdResponse_*.csv" ]
		sincedb_path => "NUL" # this is naughty, don't recommend this in prod
		ignore_older => 0 # don't do this either
	}
}

filter {
	# I had logstash in my path above, so just matching for log would trigger every rule
	if [path] =~ "CrowdResponse_log" {
		csv {
			columns => ["system","level","module","datetime","text"]
			# convert seems to only work for one arg at a time. You could do it like this:
			# convert => { "datetime" => "date_time" }
			# OR do it like below
			add_field => { "document_type" => "crowdresponse_log" }
		}
		# I prefer the ISO8601 format to the csv format, this is up to you.
		date {
			match => ["datetime","ISO8601"] 
			target => "datetime" 
		}

	} else if [path] =~ "dirlist" {
		csv {
			columns => ["system","path","name","size","attrhex","attrstr","created", "accessed", "modified","companyname","filedescription","fileversion","internalname","legalcopyright","originalfilename","productname","productversion","cert_exists","cert_verified","cert_result","cert_comment","cert_signer","cert_type","md5","sha1","sha256"]
			add_field => { "document_type" => "dirlist" }
		}
	} else if [path] =~ "drivers" {
		csv {
			columns => ["system","driver_file","driver_base","path","name","size","attrhex","attrstr","created","accessed","modified","companyname","filedescription","fileversion","internalname","legalcopyright","originalfilename","productname","productversion","cert_exists","cert_verified","cert_result","cert_comment","cert_signer","cert_type","md5","sha1","sha256"]
			add_field => { "document_type" => "drivers" }
		}

	} else if [path] =~ "handles" {
		csv {
			columns => ["system","pid","procname","id","type","name"]
			add_field => { "document_type" => "handles" }
		}
	
	} else if [path] =~ "mal_dllhijacking_inpath" {
		csv {
			columns => ["system","path1_path","path1_name","path1_size","path1_attrhex","path1_attrstr","path1_created","path1_accessed","path1_modified","path1_companyname","path1_filedescription","path1_fileversion","path1_internalname","path1_legalcopyright","path1_originalfilename","path1_productname","path1_productversion","path1_cert_exists","path1_cert_verified","path1_cert_result","path1_cert_comment","path1_cert_signer","path1_cert_type","path1_md5","path1_sha1","path1_sha256","path2_path","path2_name","path2_size","path2_attrhex","path2_attrstr","path2_created","path2_accessed","path2_modified","path2_companyname","path2_filedescription","path2_fileversion","path2_internalname","path2_legalcopyright","path2_originalfilename","path2_productname","path2_productversion","path2_cert_exists","path2_cert_verified","path2_cert_result","path2_cert_comment","path2_cert_signer","path2_cert_type","path2_md5","path2_sha1","path2_sha256"]
			add_field => { "document_type" => "mal_dllhijacking_inpath" }

			
		}
	} else if [path] =~ "mal_dllhijacking_svchost" {
		csv {
			columns => ["system","process","pid","servicename","servicedisplayname","path1_path","path1_name","path1_size","path1_attrhex","path1_attrstr","path1_created","path1_accessed","path1_modified","path1_companyname","path1_filedescription","path1_fileversion","path1_internalname","path1_legalcopyright","path1_originalfilename","path1_productname","path1_productversion","path1_cert_exists","path1_cert_verified","path1_cert_result","path1_cert_comment","path1_cert_signer","path1_cert_type","path1_md5","path1_sha1","path1_sha256","path2_path","path2_name","path2_size","path2_attrhex","path2_attrstr","path2_created","path2_accessed","path2_modified","path2_companyname","path2_filedescription","path2_fileversion","path2_internalname","path2_legalcopyright","path2_originalfilename","path2_productname","path2_productversion","path2_cert_exists","path2_cert_verified","path2_cert_result","path2_cert_comment","path2_cert_signer","path2_cert_type","path2_md5","path2_sha1","path2_sha256"]
			add_field => { "document_type" => "mal_dllhijacking_svchost" }

		}
	} else if [path] =~ "mal_stickykeys" {
		csv {
			columns => ["system","app_name","integrity_vulnerable","integrity_path","integrity_name","integrity_size","integrity_attrhex","integrity_attrstr","integrity_created","integrity_accessed","integrity_modified","integrity_companyname","integrity_filedescription","integrity_fileversion","integrity_internalname","integrity_legalcopyright","integrity_originalfilename","integrity_productname","integrity_productversion","integrity_cert_exists","integrity_cert_verified","integrity_cert_result","integrity_cert_comment","integrity_cert_signer","integrity_cert_type","integrity_md5","integrity_sha1","integrity_sha256","debugger_vulnerable","debugger_path","debugger_name","debugger_size","debugger_attrhex","debugger_attrstr","debugger_created","debugger_accessed","debugger_modified","debugger_companyname","debugger_filedescription","debugger_fileversion","debugger_internalname","debugger_legalcopyright","debugger_originalfilename","debugger_productname","debugger_productversion","debugger_cert_exists","debugger_cert_verified","debugger_cert_result","debugger_cert_comment","debugger_cert_signer","debugger_cert_type","debugger_md5","debugger_sha1","debugger_sha256"]
			add_field => { "document_type" => "mal_stickykeys" }
			convert => {"integrity_vulnerable" => "boolean"}
			convert => {"debugger_vulnerable" => "boolean"}

		}
	} else if [path] =~ "prefetch" {
		csv {
			columns => ["system","path","internalname","runcount","timestamp_utc","timestamp_utc_1","timestamp_utc_2","timestamp_utc_3","timestamp_utc_4","timestamp_utc_5","timestamp_utc_6","timestamp_utc_7","modulename"]
			add_field => { "document_type" => "prefetch" }
		}
		
		date {
			match => ["timestamp_utc","ISO8601"] 
			target => "timestamp_utc" 
		}
		date {
			match => ["timestamp_utc_1","ISO8601"] 
			target => "timestamp_utc_1" 
		}
		date {
			match => ["timestamp_utc_2","ISO8601"] 
			target => "timestamp_utc_2" 
		}
		date {
			match => ["timestamp_utc_3","ISO8601"] 
			target => "timestamp_utc_3" 
		}
		date {
			match => ["timestamp_utc_4","ISO8601"] 
			target => "timestamp_utc_4" 
		}
		date {
			match => ["timestamp_utc_5","ISO8601"] 
			target => "timestamp_utc_5" 
		}
		date {
			match => ["timestamp_utc_6","ISO8601"] 
			target => "timestamp_utc_6" 
		}
		date {
			match => ["timestamp_utc_7","ISO8601"] 
			target => "timestamp_utc_7" 
		}
	
	} else if [path] =~ "pslist_modules" {
		csv {
			columns => ["system","parent_pid","parent_path","parent_name","path","name","size","attrhex","attrstr","created","accessed","modified","companyname","filedescription","fileversion","internalname","legalcopyright","originalfilename","productname","productversion","cert_exists","cert_verified","cert_result","cert_comment","cert_signer","cert_type","md5","sha1","sha256"]
			add_field => { "document_type" => "pslist_modules" }
		}
	} else if [path] =~ "pslist" {
		csv {
			columns => ["system","pid","parentpid","priority","prioritystr","sessionid","ownersid","ownername","ownerdomain","cmdline","threadinjected","path","name","size","attrhex","attrstr","created","accessed","modified","companyname","filedescription","fileversion","internalname","legalcopyright","originalfilename","productname","productversion","cert_exists","cert_verified","cert_result","cert_comment","cert_signer","cert_type","md5","sha1","sha256","Machine","MachineStr","NumberOfSections","TimeDateStamp","NumberOfSymbols","SizeOfOptionalHeader","Characteristics","CharacteristicsStr","MajorLinkerVersion","MinorLinkerVersion","SizeOfCode","SizeOfInitializedData","SizeOfUninitializedData","AddressOfEntryPoint","MemAddressOfEntryPoint","BaseOfCode","BaseOfData","ImageBase","SectionAlignment","FileAlignment","MajorOperatingSystemVersion","MinorOperatingSystemVersion","MajorImageVersion","MinorImageVersion","MajorSubSystemVersion","MinorSubSystemVersion","Win32VersionValue","SizeOfImage","SizeOfHeaders","CheckSum","Subsystem","SubsystemStr","DllCharacteristics","DllCharacteristicsStr","SizeOfStackReserve","SizeOfStackCommit","SizeOfHeapReserve","SizeOfHeapCommit","LoaderFlags","peid","importcount","exportcount","anomalies","CodeEntropy"]
			add_field => { "document_type" => "pslist" }
			convert => {"importcount" => "integer"}
			convert => {"exportcount" => "integer"}
		}
		date {
			match => ["TimeDateStamp","ISO8601"] 
			target => "TimeDateStamp" 
		}
	} else if [path] =~ "psstrings" {
		csv {
			columns => ["system","id","name","ascii","unicode"]
			add_field => { "document_type" => "psstrings" }
		}
			
	} else if [path] =~ "regdump" {
		csv {
			columns => ["system","key","reglastwritetime","type","name","val"]
			add_field => { "document_type" => "regdump" }
		}
			
	} else if [path] =~ "regfile" {
		csv {
			columns => ["system","regkey","reglastwritetime","regtype","regname","regval","path","name","exists","launchedByRunDLL","size","attrhex","attrstr","created","accessed","modified","companyname","filedescription","fileversion","internalname","legalcopyright","originalfilename","productname","productversion","cert_exists","cert_verified","cert_result","cert_comment","cert_signer","cert_type","md5","sha1","sha256"]
			add_field => { "document_type" => "regfile" }
			convert => {"exists" => "boolean"}
			convert => {"launchedByRunDLL" => "boolean"}
		}
		date {
			match => ["reglastwritetime","ISO8601"] 
			target => "reglastwritetime" 
		}
			
	} else if [path] =~ "shim" {
		csv {
			columns => ["system","index","shim_modified","shim_updated","shim_size","shim_exec","path","name","size","attrhex","attrstr","created","accessed","modified","companyname","filedescription","fileversion","internalname","legalcopyright","originalfilename","productname","productversion","cert_exists","cert_verified","cert_result","cert_comment","cert_signer","cert_type","md5","sha1","sha256"]
			add_field => { "document_type" => "shim" }
			convert => {"shim_size" => "integer"}
		}
		date {
			match => ["shim_modified","ISO8601"] 
			target => "shim_modified" 
		}
		date {
			match => ["shim_updated","ISO8601"] 
			target => "shim_updated" 
		}
		date {
			match => ["shim_exec","ISO8601"] 
			target => "shim_exec" 
		}
			
	} else if [path] =~ "superfetch_appentries" {
		csv {
			columns => ["system","process","launchcount","fgcount","path"]
			add_field => { "document_type" => "superfetch_appentries" }
			convert => {"launchcount" => "integer"}
			convert => {"fgcount" => "integer"}
		}
			
	} else if [path] =~ "superfetch_perioddata" {
		csv {
			columns => ["system","timestamp","period","path"]
			add_field => { "document_type" => "superfetch_perioddata" }
		}
		date {
			match => ["timestamp","ISO8601"] 
			target => "timestamp" 
		}
			
	} else if [path] =~ "system" {
		csv {
			columns => ["system","timestamp_utc","timestamp_local","timezone","ipv4","macv4","ipv6","macv6","netbios","domain","dns","os","osinstall","csid","agid","iswow64process","is64bitOS","isAdmin","output","version"]
			add_field => { "document_type" => "system" }
			convert => {"iswow64process" => "boolean"}
			convert => {"is64bitOS" => "boolean"}
			convert => {"isAdmin" => "boolean"}
		}
		date {
			match => ["timestamp_utc","ISO8601"] 
			target => "timestamp_utc" 
		}
	
			
	} else if [path] =~ "yara" {
		csv {
			columns => ["system","yarafile","pid","file","identifier","result"]
			add_field => { "document_type" => "yara" }
		
		}
			
	} else {
	
		mutate {
			add_field => { "document_type" => "unknown" }
		}
	
	}
	
	
	
	mutate {
		split => { "system" => "," }
	}
	if ("" in [created]) {
		date {
			match => ["created","ISO8601"] 
			target => "created" 
		}
	}
	if ("" in [modified]) {
		date {
			match => ["modified","ISO8601"] 
			target => "modified" 
		}
	}
	if ("" in [accessed]) {
		date {
			match => ["accessed","ISO8601"] 
			target => "accessed" 
		}
	}
	if ("" in [integrity_created]) {
		date {
			match => ["integrity_created","ISO8601"] 
			target => "integrity_created" 
		}
	}
	if ("" in [integrity_modified]) {
		date {
			match => ["integrity_modified","ISO8601"] 
			target => "integrity_modified" 
		}
	}
	if ("" in [integrity_accessed]) {
		date {
			match => ["integrity_accessed","ISO8601"] 
			target => "integrity_accessed" 
		}
	}
	if ("" in [debugger_created]) {
		date {
			match => ["debugger_created","ISO8601"] 
			target => "debugger_created" 
		}
	}
	if ("" in [debugger_modified]) {
		date {
			match => ["debugger_modified","ISO8601"] 
			target => "debugger_modified" 
		}
	}
	if ("" in [debugger_accessed]) {
		date {
			match => ["debugger_accessed","ISO8601"] 
			target => "debugger_accessed" 
		}
	}
	if ("" in [path1_created]) {
		date {
			match => ["path1_created","ISO8601"] 
			target => "path1_created" 
		}
	}
	if ("" in [path2_created]) {
		date {
			match => ["path2_created","ISO8601"] 
			target => "path2_created" 
		}
	}
	if ("" in [path1_modified]) {
		date {
			match => ["path1_modified","ISO8601"] 
			target => "path1_modified" 
		}
	}
	if ("" in [path2_modified]) {
		date {
			match => ["path2_modified","ISO8601"] 
			target => "path2_modified" 
		}
	}
	if ("" in [path1_accessed]) {
		date {
			match => ["path1_accessed","ISO8601"] 
			target => "path1_accessed" 
		}
	}
	if ("" in [path2_accessed]) {
		date {
			match => ["path2_accessed","ISO8601"] 
			target => "path2_accessed" 
		}
	}
	if ("" in [size]) {
		mutate {
			convert => {"size" => "integer"}
		}
	}
	if ("" in [integrity_size]) {
		mutate {
			convert => {"integrity_size" => "integer"}
		}
	}
	if ("" in [debugger_size]) {
		mutate {
			convert => {"debugger_size" => "integer"}
		}
	}
	if ("" in [path1_size]) {
		mutate {
			convert => {"path1_size" => "integer"}
		}
	}
	if ("" in [path2_size]) {
		mutate {
			convert => {"path2_size" => "integer"}
		}
	}
	if ("" in [debugger_cert_exists]) {
		mutate {
			convert => {"debugger_cert_exists" => "boolean"}
		}
	}
	if ("" in [debugger_cert_verified]) {
		mutate {
			convert => {"debugger_cert_verified" => "boolean"}
		}
	}
	if ("" in [integrity_cert_exists]) {
		mutate {
			convert => {"integrity_cert_exists" => "boolean"}
		}
	}
	if ("" in [integrity_cert_verified]) {
		mutate {
			convert => {"integrity_cert_verified" => "boolean"}
		}
	}
	if ("" in [cert_exists]) {
		mutate {
			convert => {"cert_exists" => "boolean"}
		}
	}
	if ("" in [cert_verified]) {
		mutate {
			convert => {"cert_verified" => "boolean"}
		}
	}
	if ("" in [path1_cert_exists]) {
		mutate {
			convert => {"path1_cert_exists" => "boolean"}
		}
	}
	if ("" in [path2_cert_exists]) {
		mutate {
			convert => {"path2_cert_exists" => "boolean"}
		}
	}
	if ("" in [path1_cert_verified]) {
		mutate {
			convert => {"path1_cert_verified" => "boolean"}
		}
	}
	if ("" in [path2_cert_verified]) {
		mutate {
			convert => {"path2_cert_verified" => "boolean"}
		}
	}
}

output {
  elasticsearch { hosts => ["localhost:9200"]
  index => "tester"
  document_type => "%{document_type}"
  }
  stdout { codec => rubydebug }
}